# CLAHE Algorithm

import os
import cv2

def remove_shadows_and_save(input_path, output_path):
    # Read the image
    image = cv2.imread(input_path)

    # Check if the image is loaded successfully
    if image is not None:
        print(f"Processing image: {input_path}")

        # Convert the image to LAB color space
        lab = cv2.cvtColor(image, cv2.COLOR_BGR2LAB)

        # Split the LAB image into L, A, and B channels
        l, a, b = cv2.split(lab)

        # Apply CLAHE (Contrast Limited Adaptive Histogram Equalization) to the L channel
        clahe = cv2.createCLAHE(clipLimit=3.0, tileGridSize=(8, 8))
        cl = clahe.apply(l)

        # Merge the processed L channel with the original A and B channels
        limg = cv2.merge((cl, a, b))

        # Convert the LAB image back to BGR color space
        result = cv2.cvtColor(limg, cv2.COLOR_LAB2BGR)

        # Save the result image
        output_file = os.path.join(output_path, f"result_{os.path.basename(input_path)}")
        cv2.imwrite(output_file, result)
        print(f"Result image saved as '{output_file}'\n")

    else:
        print(f"Failed to load the image: {input_path}")

def process_images_in_directory(input_directory, output_directory):
    # Ensure the output directory exists
    os.makedirs(output_directory, exist_ok=True)

    # List all files in the input directory
    image_files = [f for f in os.listdir(input_directory) if f.endswith(('.jpg', '.jpeg', '.png'))]

    # Process each image in the directory
    for image_file in image_files:
        input_path = os.path.join(input_directory, image_file)
        remove_shadows_and_save(input_path, output_directory)

if __name__ == "__main__":
    input_directory = "C:/Users//DELL/class_hydroinfomatics/Pandas/Notebook/Data Set Project/images"
    output_directory = 'output_images_directory'

    process_images_in_directory(input_directory, output_directory)



